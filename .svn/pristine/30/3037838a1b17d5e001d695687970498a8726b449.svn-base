package com.tbse.algebro;

import org.anddev.andengine.entity.sprite.AnimatedSprite;
import org.anddev.andengine.input.touch.TouchEvent;
import org.anddev.andengine.opengl.texture.region.TiledTextureRegion;

import android.view.VelocityTracker;

class Symbol extends AnimatedSprite {
	private String color;
	private MainGameActivity main;
	public boolean toBeDestroyed;
	private boolean isRemovable;

	public enum symbolTypeEnum {
		NUMBER, OPERATION, PAREN, VARIABLE, EQUALS, FRACTION_BAR
	}

	public symbolTypeEnum symbolType;
	public int symbolCode;
	VelocityTracker velocityTracker;
	public Expression parentExpression;
	public Symbol leftNeighbor;
	public Symbol rightNeighbor;
	public TiledTextureRegion pTiledTextureRegion;

	public Symbol(float pX, float pY, TiledTextureRegion pTiledTextureRegion,
			MainGameActivity main, int symbolCode,
			boolean isRemovable) {
		super(pX, pY, pTiledTextureRegion);
		// TODO Auto-generated constructor stub
		setMain(main);
		this.symbolCode = symbolCode;
		if (symbolCode <= 9) {
			this.symbolType = symbolTypeEnum.NUMBER;
		}
		if (10 <= symbolCode && symbolCode <= 13) {
			this.symbolType = symbolTypeEnum.OPERATION;
		}
		if (14 <= symbolCode && symbolCode <= 15) {
			this.symbolType = symbolTypeEnum.PAREN;
		}
		if (14 <= symbolCode && symbolCode <= 15) {
			this.symbolType = symbolTypeEnum.PAREN;
		}
		if (16 == symbolCode) {
			this.symbolType = symbolTypeEnum.FRACTION_BAR;
		}
		if (17 == symbolCode) {
			this.symbolType = symbolTypeEnum.VARIABLE;
		}
		if (18 == symbolCode) {
			this.symbolType = symbolTypeEnum.EQUALS;
		}
		this.toBeDestroyed = false;
		setIsRemovable(isRemovable);	
		this.leftNeighbor = null;
		this.rightNeighbor = null;
		this.pTiledTextureRegion = pTiledTextureRegion;
		this.parentExpression = new Expression();
		getMain().addExpression(this.parentExpression);
		this.parentExpression.setMain(this.main);
		this.parentExpression.addSymbol(0, this);
		this.parentExpression.attachChildren();
		this.parentExpression.registerTouchAreas();
		this.setScale(getMain().getScaleFactor());
	}
	
	@Override
	public boolean onAreaTouched(final TouchEvent pSceneTouchEvent,
			final float pTouchAreaLocalX, final float pTouchAreaLocalY) {

		this.parentExpression.onAreaTouched(pSceneTouchEvent, pTouchAreaLocalX,
				pTouchAreaLocalY, this);

		return true;
	}

	public void destroySelf() {

		if (isRemovable()) {
			getMain().getScene().unregisterTouchArea(this);
			getMain().getScene().detachChild(this);
			main.getSymbols().remove(this);
		} else {
		}
	}

	public MainGameActivity getMain() {
		return this.main;
	}

	public void setMain(MainGameActivity main) {
		this.main = main;
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public Vector2 getCenterPoint() {
		return new Vector2(getX(), getY());
	}

	public void setIsRemovable(boolean t) {
		this.isRemovable = t;
	}

	public boolean isRemovable() {
		return this.isRemovable;
	}

	public symbolTypeEnum getSymbolType() {
		return symbolType;
	}

	public void setSymbolType(symbolTypeEnum symbolType) {
		this.symbolType = symbolType;
	}

	public boolean isANeighbor(Symbol s) {
		if (this.leftNeighbor != null) {
			if (this.leftNeighbor.equals(s)) {
				return true;
			}
		}
		if (this.rightNeighbor != null) {
			if (this.rightNeighbor.equals(s)) {
				return true;
			}
		}

		return false;
	}

	public void setVelocityTracker(VelocityTracker vt) {
		this.velocityTracker = vt;
	}

	public VelocityTracker getVelocityTracker() {
		return this.velocityTracker;
	}

}
