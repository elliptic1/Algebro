package com.tbse.algebro;

import java.util.ArrayList;
import java.util.Arrays;

import org.anddev.andengine.engine.Engine;
import org.anddev.andengine.engine.camera.ZoomCamera;
import org.anddev.andengine.engine.handler.IUpdateHandler;
import org.anddev.andengine.engine.options.EngineOptions;
import org.anddev.andengine.engine.options.EngineOptions.ScreenOrientation;
import org.anddev.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.anddev.andengine.entity.scene.Scene;
import org.anddev.andengine.entity.scene.background.ColorBackground;
import org.anddev.andengine.entity.sprite.TiledSprite;
import org.anddev.andengine.input.touch.TouchEvent;
import org.anddev.andengine.opengl.texture.TextureOptions;
import org.anddev.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas;
import org.anddev.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory;
import org.anddev.andengine.opengl.texture.region.TiledTextureRegion;
import org.anddev.andengine.ui.activity.BaseGameActivity;
import org.anddev.andengine.util.modifier.ease.EaseBackIn;
import org.anddev.andengine.util.modifier.ease.EaseBackInOut;
import org.anddev.andengine.util.modifier.ease.EaseBackOut;
import org.anddev.andengine.util.modifier.ease.EaseBounceIn;
import org.anddev.andengine.util.modifier.ease.EaseBounceInOut;
import org.anddev.andengine.util.modifier.ease.EaseBounceOut;
import org.anddev.andengine.util.modifier.ease.EaseCircularIn;
import org.anddev.andengine.util.modifier.ease.EaseCircularInOut;
import org.anddev.andengine.util.modifier.ease.EaseCircularOut;
import org.anddev.andengine.util.modifier.ease.EaseCubicIn;
import org.anddev.andengine.util.modifier.ease.EaseCubicInOut;
import org.anddev.andengine.util.modifier.ease.EaseCubicOut;
import org.anddev.andengine.util.modifier.ease.EaseElasticIn;
import org.anddev.andengine.util.modifier.ease.EaseElasticInOut;
import org.anddev.andengine.util.modifier.ease.EaseElasticOut;
import org.anddev.andengine.util.modifier.ease.EaseExponentialIn;
import org.anddev.andengine.util.modifier.ease.EaseExponentialInOut;
import org.anddev.andengine.util.modifier.ease.EaseExponentialOut;
import org.anddev.andengine.util.modifier.ease.EaseLinear;
import org.anddev.andengine.util.modifier.ease.EaseQuadIn;
import org.anddev.andengine.util.modifier.ease.EaseQuadInOut;
import org.anddev.andengine.util.modifier.ease.EaseQuadOut;
import org.anddev.andengine.util.modifier.ease.EaseQuartIn;
import org.anddev.andengine.util.modifier.ease.EaseQuartInOut;
import org.anddev.andengine.util.modifier.ease.EaseQuartOut;
import org.anddev.andengine.util.modifier.ease.EaseQuintIn;
import org.anddev.andengine.util.modifier.ease.EaseQuintInOut;
import org.anddev.andengine.util.modifier.ease.EaseQuintOut;
import org.anddev.andengine.util.modifier.ease.EaseSineIn;
import org.anddev.andengine.util.modifier.ease.EaseSineInOut;
import org.anddev.andengine.util.modifier.ease.EaseSineOut;
import org.anddev.andengine.util.modifier.ease.EaseStrongIn;
import org.anddev.andengine.util.modifier.ease.EaseStrongInOut;
import org.anddev.andengine.util.modifier.ease.EaseStrongOut;
import org.anddev.andengine.util.modifier.ease.IEaseFunction;

import android.content.res.Configuration;
import android.graphics.Point;
import android.view.Display;
import android.view.MotionEvent;

public class MainGameActivity extends BaseGameActivity {

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
	}

	private Scene scene;
	private Engine engine;

	public Symbol currentlyMoving;

	static int CAMERA_WIDTH;
	static int CAMERA_HEIGHT;
	protected static final int MENU_HOME = 1;

	private ArrayList<Symbol> symbols = new ArrayList<Symbol>(10);

	private ZoomCamera mCamera;

	private BitmapTextureAtlas trashCornerTexture;
	private BitmapTextureAtlas xTexture;
	private BitmapTextureAtlas number0Texture;
	private BitmapTextureAtlas number1Texture;
	private BitmapTextureAtlas number2Texture;
	private BitmapTextureAtlas number3Texture;
	private BitmapTextureAtlas number4Texture;
	private BitmapTextureAtlas number5Texture;
	private BitmapTextureAtlas number6Texture;
	private BitmapTextureAtlas number7Texture;
	private BitmapTextureAtlas number8Texture;
	private BitmapTextureAtlas number9Texture;
	private BitmapTextureAtlas opPlusTexture;
	private BitmapTextureAtlas opMinusTexture;
	private BitmapTextureAtlas opMultiplyTexture;
	private BitmapTextureAtlas opDivideTexture;
	private BitmapTextureAtlas opEqualsTexture;
	private BitmapTextureAtlas leftParenTexture;
	private BitmapTextureAtlas rightParenTexture;
	private BitmapTextureAtlas fractionBarTexture;
	private BitmapTextureAtlas resetButtonTexture;

	private TiledTextureRegion mTrashCornerTextureRegion;
	private TiledTextureRegion mXTextureRegion;
	private TiledTextureRegion mNumber0TextureRegion;
	private TiledTextureRegion mNumber1TextureRegion;
	private TiledTextureRegion mNumber2TextureRegion;
	private TiledTextureRegion mNumber3TextureRegion;
	private TiledTextureRegion mNumber4TextureRegion;
	private TiledTextureRegion mNumber5TextureRegion;
	private TiledTextureRegion mNumber6TextureRegion;
	private TiledTextureRegion mNumber7TextureRegion;
	private TiledTextureRegion mNumber8TextureRegion;
	private TiledTextureRegion mNumber9TextureRegion;
	private TiledTextureRegion mOpPlusTextureRegion;
	private TiledTextureRegion mOpMinusTextureRegion;
	private TiledTextureRegion mOpMultiplyTextureRegion;
	private TiledTextureRegion mOpDivideTextureRegion;
	private TiledTextureRegion mOpEqualsTextureRegion;
	private TiledTextureRegion mLeftParenTextureRegion;
	private TiledTextureRegion mRightParenTextureRegion;
	private TiledTextureRegion mFractionBarTextureRegion;
	private TiledTextureRegion mResetButtonTextureRegion;

	private SpecialArea paletteArea;
	private SpecialArea trashArea;
	private ArrayList<SpecialArea> specialAreas;
	public ArrayList<Expression> expressions;

	public static final IEaseFunction[] EASEFUNCTIONS = new IEaseFunction[] {
			EaseElasticOut.getInstance(), EaseExponentialOut.getInstance(),
			EaseLinear.getInstance(), EaseBackIn.getInstance(),
			EaseBackOut.getInstance(), EaseBackInOut.getInstance(),
			EaseBounceIn.getInstance(), EaseBounceOut.getInstance(),
			EaseBounceInOut.getInstance(), EaseCircularIn.getInstance(),
			EaseCircularOut.getInstance(), EaseCircularInOut.getInstance(),
			EaseCubicIn.getInstance(), EaseCubicOut.getInstance(),
			EaseCubicInOut.getInstance(), EaseElasticIn.getInstance(),
			EaseElasticInOut.getInstance(), EaseExponentialIn.getInstance(),
			EaseExponentialInOut.getInstance(), EaseQuadIn.getInstance(),
			EaseQuadOut.getInstance(), EaseQuadInOut.getInstance(),
			EaseQuartIn.getInstance(), EaseQuartOut.getInstance(),
			EaseQuartInOut.getInstance(), EaseQuintIn.getInstance(),
			EaseQuintOut.getInstance(), EaseQuintInOut.getInstance(),
			EaseSineIn.getInstance(), EaseSineOut.getInstance(),
			EaseSineInOut.getInstance(), EaseStrongIn.getInstance(),
			EaseStrongOut.getInstance(), EaseStrongInOut.getInstance() };

	@Override
	public void onLoadComplete() {
		// TODO Auto-generated method stub

	}

	@Override
	public org.anddev.andengine.engine.Engine onLoadEngine() {
		// TODO Auto-generated method stub
		final Display display = getWindowManager().getDefaultDisplay();
		Point outSize = new Point();
		display.getSize(outSize);
		CAMERA_WIDTH = outSize.x;
		CAMERA_HEIGHT = outSize.y;
		this.mCamera = new ZoomCamera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);

		System.loadLibrary("gdx");

		EngineOptions options = new EngineOptions(true,
				ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(
						CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera);

		options.getTouchOptions().enableRunOnUpdateThread();

		this.engine = new org.anddev.andengine.engine.Engine(options);
		return engine;

	}

	@Override
	public void onLoadResources() {

		this.xTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number0Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number1Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number2Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number3Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number4Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number5Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number6Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number7Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number8Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.number9Texture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.opPlusTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.opMinusTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.opMultiplyTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.opDivideTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.leftParenTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.rightParenTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.fractionBarTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.opEqualsTexture = new BitmapTextureAtlas(128, 128,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.resetButtonTexture = new BitmapTextureAtlas(512, 256,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		this.trashCornerTexture = new BitmapTextureAtlas(512, 256,
				TextureOptions.BILINEAR_PREMULTIPLYALPHA);

		this.setmTrashCornerTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.trashCornerTexture, this,
						"gfx/trashcorner.png", 0, 0, 2, 1));
		this.setmXTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.xTexture, this, "gfx/x.png", 0, 0,
						1, 1));
		this.setmNumber0TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number0Texture, this,
						"gfx/number0.png", 0, 0, 1, 1));
		this.setmNumber1TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number1Texture, this,
						"gfx/number1.png", 0, 0, 1, 1));
		this.setmNumber2TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number2Texture, this,
						"gfx/number2.png", 0, 0, 1, 1));
		this.setmNumber3TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number3Texture, this,
						"gfx/number3.png", 0, 0, 1, 1));
		this.setmNumber4TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number4Texture, this,
						"gfx/number4.png", 0, 0, 1, 1));
		this.setmNumber5TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number5Texture, this,
						"gfx/number5.png", 0, 0, 1, 1));
		this.setmNumber6TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number6Texture, this,
						"gfx/number6.png", 0, 0, 1, 1));
		this.setmNumber7TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number7Texture, this,
						"gfx/number7.png", 0, 0, 1, 1));
		this.setmNumber8TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number8Texture, this,
						"gfx/number8.png", 0, 0, 1, 1));
		this.setmNumber9TextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.number9Texture, this,
						"gfx/number9.png", 0, 0, 1, 1));
		this.setmOpPlusTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.opPlusTexture, this,
						"gfx/opplus.png", 0, 0, 1, 1));
		this.setmOpMinusTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.opMinusTexture, this,
						"gfx/opminus.png", 0, 0, 1, 1));
		this.setmOpMultiplyTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.opMultiplyTexture, this,
						"gfx/opmultiply.png", 0, 0, 1, 1));
		this.setmOpDivideTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.opDivideTexture, this,
						"gfx/opdivide.png", 0, 0, 1, 1));
		this.setmLeftParenTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.leftParenTexture, this,
						"gfx/leftparen.png", 0, 0, 1, 1));
		this.setmRightParenTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.rightParenTexture, this,
						"gfx/rightparen.png", 0, 0, 1, 1));
		this.setmFractionBarTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.fractionBarTexture, this,
						"gfx/fractionbar.png", 0, 0, 1, 1));
		this.setmOpEqualsTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.opEqualsTexture, this,
						"gfx/opequals.png", 0, 0, 1, 1));
		this.setmResetButtonTextureRegion(BitmapTextureAtlasTextureRegionFactory
				.createTiledFromAsset(this.resetButtonTexture, this,
						"gfx/resetbutton.png", 0, 0, 2, 1));

		this.mEngine.getTextureManager().loadTexture(this.xTexture);
		this.mEngine.getTextureManager().loadTexture(this.trashCornerTexture);
		this.mEngine.getTextureManager().loadTexture(this.number1Texture);
		this.mEngine.getTextureManager().loadTexture(this.number2Texture);
		this.mEngine.getTextureManager().loadTexture(this.number3Texture);
		this.mEngine.getTextureManager().loadTexture(this.number4Texture);
		this.mEngine.getTextureManager().loadTexture(this.number5Texture);
		this.mEngine.getTextureManager().loadTexture(this.number6Texture);
		this.mEngine.getTextureManager().loadTexture(this.number7Texture);
		this.mEngine.getTextureManager().loadTexture(this.number8Texture);
		this.mEngine.getTextureManager().loadTexture(this.number9Texture);
		this.mEngine.getTextureManager().loadTexture(this.number0Texture);
		this.mEngine.getTextureManager().loadTexture(this.opPlusTexture);
		this.mEngine.getTextureManager().loadTexture(this.opMinusTexture);
		this.mEngine.getTextureManager().loadTexture(this.opMultiplyTexture);
		this.mEngine.getTextureManager().loadTexture(this.opDivideTexture);
		this.mEngine.getTextureManager().loadTexture(this.opEqualsTexture);
		this.mEngine.getTextureManager().loadTexture(this.leftParenTexture);
		this.mEngine.getTextureManager().loadTexture(this.rightParenTexture);
		this.mEngine.getTextureManager().loadTexture(this.fractionBarTexture);
		this.mEngine.getTextureManager().loadTexture(this.resetButtonTexture);

	}

	public Symbol addPaletteSymbol(float x, float y, int symbolCode) {

		Symbol symbol;
		TiledTextureRegion t;

		switch (symbolCode) {
		case 0:
			t = getmNumber0TextureRegion();
			break;
		case 1:
			t = getmNumber1TextureRegion();
			break;
		case 2:
			t = getmNumber2TextureRegion();
			break;
		case 3:
			t = getmNumber3TextureRegion();
			break;
		case 4:
			t = getmNumber4TextureRegion();
			break;
		case 5:
			t = getmNumber5TextureRegion();
			break;
		case 6:
			t = getmNumber6TextureRegion();
			break;
		case 7:
			t = getmNumber7TextureRegion();
			break;
		case 8:
			t = getmNumber8TextureRegion();
			break;
		case 9:
			t = getmNumber9TextureRegion();
			break;
		case 10:
			t = getmOpPlusTextureRegion();
			break;
		case 11:
			t = getmOpMinusTextureRegion();
			break;
		case 12:
			t = getmOpMultiplyTextureRegion();
			break;
		case 13:
			t = getmOpDivideTextureRegion();
			break;
		case 14:
			t = getmLeftParenTextureRegion();
			break;
		case 15:
			t = getmRightParenTextureRegion();
			break;
		case 16:
			t = getmFractionBarTextureRegion();
			break;
		case 17:
			t = getmXTextureRegion();
			break;
		case 18:
			t = getmOpEqualsTextureRegion();
			break;
		default:
			t = getmNumber0TextureRegion();
		}

		symbol = new Symbol(x, y, t, getScene(), this, symbolCode, false);

		getScene().attachChild(symbol);
		getScene().registerTouchArea(symbol);

		return symbol;

	}

	@Override
	public Scene onLoadScene() {
		// TODO Auto-generated method stub

		// this.createMenuScene();

		final Scene scene = new Scene();
		setScene(scene);
		getScene().setBackground(
				new ColorBackground(176 / 255f, 226 / 255f, 255 / 255f)); // lightskyblue

		// // add Palette options to screen

		// Calculate starting x and y
		int A = 100;
		float scaleFactor = 1f;
		if (CAMERA_WIDTH - 10 * A < 0) {
			scaleFactor = 0.7f;
			A = Math.round(A * scaleFactor);
		}
		int spacer = 10;
		A = A + spacer;
		int numbersRowStartingX = (CAMERA_WIDTH - 10 * A) >> 1;
		int numbersRowStartingY = CAMERA_HEIGHT - 2 * A;
		int symbolsRowStartingX = (CAMERA_WIDTH - 9 * A) >> 1;
		int symbolsRowStartingY = numbersRowStartingY + A;
		this.paletteArea = new SpecialArea(numbersRowStartingX,
				numbersRowStartingX + 10 * A, numbersRowStartingY,
				symbolsRowStartingY + A);
		this.trashArea = new SpecialArea(0, 150, 0, 150);
		this.setSpecialAreas(new ArrayList<SpecialArea>(Arrays.asList(
				this.paletteArea, this.trashArea)));

		addPaletteSymbol(numbersRowStartingX + 0, numbersRowStartingY, 0)
				.setSize(A, A); // 0
		addPaletteSymbol(numbersRowStartingX + A, numbersRowStartingY, 1)
				.setSize(A, A); // 1
		addPaletteSymbol(numbersRowStartingX + 2 * A, numbersRowStartingY, 2)
				.setSize(A, A); // 2
		addPaletteSymbol(numbersRowStartingX + 3 * A, numbersRowStartingY, 3)
				.setSize(A, A); // 3
		addPaletteSymbol(numbersRowStartingX + 4 * A, numbersRowStartingY, 4)
				.setSize(A, A); // 4
		addPaletteSymbol(numbersRowStartingX + 5 * A, numbersRowStartingY, 5)
				.setSize(A, A); // 5
		addPaletteSymbol(numbersRowStartingX + 6 * A, numbersRowStartingY, 6)
				.setSize(A, A); // 6
		addPaletteSymbol(numbersRowStartingX + 7 * A, numbersRowStartingY, 7)
				.setSize(A, A); // 7
		addPaletteSymbol(numbersRowStartingX + 8 * A, numbersRowStartingY, 8)
				.setSize(A, A); // 8
		addPaletteSymbol(numbersRowStartingX + 9 * A, numbersRowStartingY, 9)
				.setSize(A, A); // 9
		addPaletteSymbol(symbolsRowStartingX + 0, symbolsRowStartingY, 10)
				.setSize(A, A); // +
		addPaletteSymbol(symbolsRowStartingX + A, symbolsRowStartingY, 11)
				.setSize(A, A); // -
		addPaletteSymbol(symbolsRowStartingX + 2 * A, symbolsRowStartingY, 12)
				.setSize(A, A); // *
		addPaletteSymbol(symbolsRowStartingX + 3 * A, symbolsRowStartingY, 13)
				.setSize(A, A); // /
		addPaletteSymbol(symbolsRowStartingX + 4 * A, symbolsRowStartingY, 14)
				.setSize(A, A); // (
		addPaletteSymbol(symbolsRowStartingX + 5 * A, symbolsRowStartingY, 15)
				.setSize(A, A); // )
		addPaletteSymbol(symbolsRowStartingX + 6 * A,
				symbolsRowStartingY + 0.3f * A, 16).setSize(A, A * 0.4f); // ---
																			// fraction
																			// bar
		addPaletteSymbol(symbolsRowStartingX + 7 * A, symbolsRowStartingY, 17)
				.setSize(A, A); // x
		addPaletteSymbol(symbolsRowStartingX + 8 * A, symbolsRowStartingY, 18)
				.setSize(A, A); // =

		TiledSprite resetButton = new TiledSprite(0, 110,
				getmResetButtonTextureRegion()) {

			public boolean onAreaTouched(final TouchEvent pSceneTouchEvent,
					final float pTouchAreaLocalX, final float pTouchAreaLocalY) {

				if (pSceneTouchEvent.getAction() == MotionEvent.ACTION_DOWN) {
					this.setCurrentTileIndex(1); // swap pics

					if (expressions != null) {
						if (expressions.size() >= 1) {

							for (final Expression e : expressions) {
								runOnUpdateThread(new Runnable() {
									@Override
									public void run() {
										// TODO Auto-generated method stub
										e.destroySelf(getScene());
									}
								});

							}
						}
					}
				} else if (pSceneTouchEvent.getAction() == MotionEvent.ACTION_UP) {
					this.setCurrentTileIndex(0);

				}
				return true;
			}

		};

		TiledSprite trashAreaSprite = new TiledSprite(0, 0,
				getmTrashCornerTextureRegion()) {

			public boolean onAreaTouched(final TouchEvent pSceneTouchEvent,
					final float pTouchAreaLocalX, final float pTouchAreaLocalY) {

				if (pSceneTouchEvent.getAction() == MotionEvent.ACTION_DOWN) {
					this.setCurrentTileIndex(1); // swap pics

					if (expressions != null) {
						if (expressions.size() >= 1) {
							for (final Expression e : expressions) {
								runOnUpdateThread(new Runnable() {
									@Override
									public void run() {
										// TODO Auto-generated method stub
										e.destroySelf(getScene());
									}
								});
							}
						}
					}

				} else if (pSceneTouchEvent.getAction() == MotionEvent.ACTION_UP) {
					this.setCurrentTileIndex(0);

				}
				return true;
			}
		};

		getScene().registerUpdateHandler(new IUpdateHandler() {

			@Override
			public void reset() {
				// TODO Auto-generated method stub

			}

			@Override
			public void onUpdate(float arg0) {
				// TODO Auto-generated method stub

				if (expressions != null) {
					if (expressions.size() >= 1) {
						for (Expression e : expressions) {
							e.checkForCollisions();
						}
					}
				}
			}
		});

		getScene().attachChild(resetButton);
		getScene().registerTouchArea(resetButton);
		getScene().attachChild(trashAreaSprite);
		getScene().registerTouchArea(trashAreaSprite);
		getScene().setTouchAreaBindingEnabled(true);

		return getScene();
	}

	public Scene getScene() {
		return this.scene;
	}

	public void setScene(Scene scene) {
		this.scene = scene;
	}

	public Engine getEngine() {
		return engine;
	}

	public void setEngine(Engine engine) {
		this.engine = engine;
	}

	public void setOpMinusTexture(BitmapTextureAtlas opMinusTexture) {
		this.opMinusTexture = opMinusTexture;
	}

	public TiledTextureRegion getmTrashCornerTextureRegion() {
		return mTrashCornerTextureRegion;
	}

	public TiledTextureRegion getmNumber0TextureRegion() {
		return mNumber0TextureRegion;
	}

	public TiledTextureRegion getmNumber1TextureRegion() {
		return mNumber1TextureRegion;
	}

	public TiledTextureRegion getmNumber2TextureRegion() {
		return mNumber2TextureRegion;
	}

	public TiledTextureRegion getmNumber3TextureRegion() {
		return mNumber3TextureRegion;
	}

	public TiledTextureRegion getmNumber4TextureRegion() {
		return mNumber4TextureRegion;
	}

	public TiledTextureRegion getmNumber5TextureRegion() {
		return mNumber5TextureRegion;
	}

	public TiledTextureRegion getmNumber6TextureRegion() {
		return mNumber6TextureRegion;
	}

	public TiledTextureRegion getmNumber7TextureRegion() {
		return mNumber7TextureRegion;
	}

	public TiledTextureRegion getmNumber8TextureRegion() {
		return mNumber8TextureRegion;
	}

	public TiledTextureRegion getmNumber9TextureRegion() {
		return mNumber9TextureRegion;
	}

	public TiledTextureRegion getmOpPlusTextureRegion() {
		return mOpPlusTextureRegion;
	}

	public TiledTextureRegion getmOpMinusTextureRegion() {
		return mOpMinusTextureRegion;
	}

	public TiledTextureRegion getmOpMultiplyTextureRegion() {
		return mOpMultiplyTextureRegion;
	}

	public TiledTextureRegion getmOpDivideTextureRegion() {
		return mOpDivideTextureRegion;
	}

	public TiledTextureRegion getmOpEqualsTextureRegion() {
		return mOpEqualsTextureRegion;
	}

	public TiledTextureRegion getmLeftParenTextureRegion() {
		return mLeftParenTextureRegion;
	}

	public TiledTextureRegion getmRightParenTextureRegion() {
		return mRightParenTextureRegion;
	}

	public TiledTextureRegion getmFractionBarTextureRegion() {
		return mFractionBarTextureRegion;
	}

	public TiledTextureRegion getmResetButtonTextureRegion() {
		return mResetButtonTextureRegion;
	}

	public void setmNumber1TextureRegion(TiledTextureRegion mFaceTextureRegion) {
		this.mNumber1TextureRegion = mFaceTextureRegion;
	}

	private void setmFractionBarTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mFractionBarTextureRegion = createTiledFromAsset;
	}

	private void setmRightParenTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mRightParenTextureRegion = createTiledFromAsset;
	}

	private void setmLeftParenTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mLeftParenTextureRegion = createTiledFromAsset;
	}

	private void setmOpDivideTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mOpDivideTextureRegion = createTiledFromAsset;
	}

	private void setmOpMultiplyTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mOpMultiplyTextureRegion = createTiledFromAsset;
	}

	private void setmOpMinusTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mOpMinusTextureRegion = createTiledFromAsset;
	}

	private void setmOpEqualsTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mOpEqualsTextureRegion = createTiledFromAsset;
	}

	private void setmTrashCornerTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mTrashCornerTextureRegion = createTiledFromAsset;
	}

	private void setmResetButtonTextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mResetButtonTextureRegion = createTiledFromAsset;
	}

	private void setmOpPlusTextureRegion(TiledTextureRegion createTiledFromAsset) {
		this.mOpPlusTextureRegion = createTiledFromAsset;
	}

	private void setmNumber9TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber9TextureRegion = createTiledFromAsset;
	}

	private void setmNumber8TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber8TextureRegion = createTiledFromAsset;
	}

	private void setmNumber7TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber7TextureRegion = createTiledFromAsset;
	}

	private void setmNumber6TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber6TextureRegion = createTiledFromAsset;
	}

	private void setmNumber5TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber5TextureRegion = createTiledFromAsset;
	}

	private void setmNumber4TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber4TextureRegion = createTiledFromAsset;
	}

	private void setmNumber3TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber3TextureRegion = createTiledFromAsset;
	}

	private void setmNumber0TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber0TextureRegion = createTiledFromAsset;
	}

	private void setmNumber2TextureRegion(
			TiledTextureRegion createTiledFromAsset) {
		this.mNumber2TextureRegion = createTiledFromAsset;
	}

	public TiledTextureRegion getmXTextureRegion() {
		return mXTextureRegion;
	}

	public void setmXTextureRegion(TiledTextureRegion mXTextureRegion) {
		this.mXTextureRegion = mXTextureRegion;
	}

	public BitmapTextureAtlas getxTexture() {
		return xTexture;
	}

	public void setxTexture(BitmapTextureAtlas xTexture) {
		this.xTexture = xTexture;
	}

	public ArrayList<SpecialArea> getSpecialAreas() {
		return specialAreas;
	}

	public void setSpecialAreas(ArrayList<SpecialArea> specialAreas) {
		this.specialAreas = specialAreas;
	}

	public ArrayList<Symbol> getSymbols() {
		return symbols;
	}

	public void setSymbols(ArrayList<Symbol> symbols) {
		this.symbols = symbols;
	}

}
